Questions to keep in mind -

1-What is C#?
2-What is JIT? and what is the role of JIT?
3-Difference between readonly and const keyword?
4-Difference between value type and reference type in C#?
5-Difference between Implicit & Explicit Conversion?
6-Difference between boxing and unboxing?
7-What are operators in C#?
8-What is the use of if else condition?
9-Difference between if else and switch case  in C#?
10-Difference between for loop and Foreach loop in C#?

C#,.NET Framework,ASP.NET,ASP.NET MVC,ASP.NET Core - Web Application - Goal

C# Programing Language with .NET Framework:-
C# 1.0 Year 2002 .NET Framework 1.0 + IDE -2002
C# 9.0 Year 2021 .NET Framework 4.8 IDE -2019

Age Of C# Programing Language= 19+ years

CLR - Common Language Runtime: runtime environment that manages the execution of programs written in
    any language that uses .NET Framework
MSIL - Microsoft Intermediate Language: a CPU-independent set of instructions that can be efficiently 
    converted to native code. A combination off dll and exe
.dll - Dynamic Link Library - does not contain a Main method: class library
.exe - Executable File - contains the Main method
JIT - Just In Time - compiler, it translates native C# code to machine code
Compile Time - the period of time when the developer's code is converted into machine code. Generates exe and dll
Run Time - the period of time where the code is executed. Gives final output
CTS - Common Type System - defines how types are declared, used and managed in the CLR and 
      important for cross-language integration
CLS - Common Language Specification - defines a set of features that are needed by many common
      applications, and provides guidelines for .NET languages

C# Source Code:-CLR-MSIL(.dll,.exe)-JIT-Native(Machine) code-OS-Run

using System;
namespace MyNamespace
{  
    class MyClass
	{
	  static void Main()
	  {
	     Console.WrtieLine("Hello C# Program");
		 Console.ReadKey();
	  }
	}
}

--------Microsoft Journey In IT-----------------------------------------
1-Console Application - To Learn C#
2-Windows Application or Desktop Application(.exe)
3-Web Application - Goal 
4-Mobile Apps - Xamarin
5-Web API 
6-Game Application etc.

-----------------------------------------------------------------------------

Namespace - Is a collection of namesapces,classes,struct,enum,delegate,interface etc.- (PascalCase)
Method - A set of statements which perform a specific task
Class Members - Fields(camelCase), Properties(getters and setters), Methods(PascalCase)
Variable - a container which contains a value
Data Type - Defines the type of data
Class - It is represented by an object. Class is a container which contains its members
Object - It represents the class.

Pre-Defined OR Buit-In Data Types in C# - int,double,char,bool,string,object etc.            

User Defined Data Types in C# - class,object,array,delegate,interface,struct,enum,etc.

Value Type - int,double,char,bool,struct,enum etc.
  A. Has a default value of 0.
  B. Value type will be stored in Stack memory.
  C. No garbage collection required.

Reference Type - string,object,class,object,array,delegate,interface, etc.
  A. Has a default value of null.
  B. Referece type value is stored in heap memory but its reference is stored on the stack.
  C. Garbage collection is required for memory mamangement.

Class vs Object

India(Class)                         USA(Class)
Shri Narendra Modi(object)           Biden(object)

Class Members(field,Property,Method(non-static(object))(Static(class)))

How to create an instance of a class
   ClassName objectName = new ClassName();
            
Var Keyword:
   1. Whenever you declare var you must assign a value to it
   2. Var cannot be assigned a Null value
   3. When var is assigned a value it will be stored as a specific data type
   4. When it is assigned as a data type it will behave like that data type
   5. You can use var as a local variable
   6. Can't declare var as a class level variable or parameterized variable
   7. Can't use var as a return type in a method declaration
              
Conversions:
              
1. Implicit Conversion -
   A. Converting lower precision values into higher precision values is called implicit conversion
   B. No type casting is required *Example: sbyte can be converted to short
   C. No data loss
              
2. Explicit Conversion -
   A. converting higher precision values to lower precision values is known as explicit conversion
   B. Must type cast
   C. Possibility of data loss
              
Boxing and Unboxing:
              
1. Boxing -
   A. Converting value type into an object type
   B. No type casting is required
              
2. Unboxing -
   A. Converting an object into a value type
   B. Typecasting is required
              
Const and ReadOnly
              
1. Const -
   A. Cannot be changed after it is declared
   B. A value must be given when a const is declared
              
2. ReadOnly -
   A. Can only be changed in the constructor

-------------------------------------------8th June 2021---------------------------------------------------------
Operators in C#:-
            1-Arithmetic Operator +,-,*,/,%
            2-Assignment Opeartor =
            3-Unary Operator i++(Post-Incrment),++i(Pre-Increment),i--(Post-Decrement),--i(Pre-Decrement)
            4-Comparision Oprator or Conditional Operator >,<,>=,<=,==,!=
            5-Logical Operator &&(AND),||(OR),!(NOT)
            6-Ternary Operator /? conditon?true:false;

1-Arithmetic Operator +,-,*,/,%
   int i = 20, j = 10;
   Console.WriteLine(i + j);20=10=30
   Console.WriteLine(i - j);20-10=10
   Console.WriteLine(i * j);20 * 10=200
   Console.WriteLine(i / j);20/10=2
   Console.WriteLine(i % j);20%10=0

2-Assignment Opeartor =
   int k = 200;

            3-Unary Operator i++(Post-Incrment),++i(Pre-Increment),i--(Post-Decrement),--i(Pre-Decrement)
            int l = 20;

            Console.WriteLine(l++);20
            Console.WriteLine(++l);21+1=22
            Console.WriteLine(l++);22
            Console.WriteLine(l++);23
            Console.WriteLine(l);24

            Console.WriteLine(--l);20-1=19
            Console.WriteLine(l--);19
            Console.WriteLine(l--);19-1=18
            Console.WriteLine(--l);201618-2=16

            4-Comparision Oprator or Conditional Operator >,<,>=,<=,==,!=
            int i = 20, j = 10;

            Console.WriteLine(i > j);true
            Console.WriteLine(i < j);false
            Console.WriteLine(i >= j);true
            Console.WriteLine(i <=j);false
            Console.WriteLine(i == j);false
            Console.WriteLine(i != j);true

            5-Logical Operator &&(AND),||(OR),!(NOT)
            && (AND) 1-If both condition is true then it will return true.
            2-If first condtion is false it will not check second condition and it will return false.
            3-If first condition is true then it will check second condition and it second condition is true 
            then it will return true otherwise it will return false.
            int i = 20, j = 10;

            Console.WriteLine(i > j && j < i);true
            Console.WriteLine(i < j && j != i);false
            Console.WriteLine(i == j && j > i);false
            Console.WriteLine(i != j && j < i);true

            || (OR) 1-If first condition is true then it will not check second condition and it will return true.
            2-If first condition is false then it will check second condition and if second condition is true  
            then it will return true.
            3-If both condition is false then only it will return false.

            Console.WriteLine(i > j || j < i);true
            Console.WriteLine(i < j || j != i);true
            Console.WriteLine(i == j || j > i);false
            Console.WriteLine(i != j || j < i);true

            ! (Not)
            Console.WriteLine(!(i > j || j < i));truefalse
            Console.WriteLine(!(i < j || j != i));truefalse
            Console.WriteLine(!(i == j || j > i));falsetrue
            Console.WriteLine(!(i != j || j < i));truefalse

            6-Ternary Operator conditon?true:false;

            int result = !(i == j || j > i) ? 500 : 1000;

            Console.WriteLine(result);

-------------------------------------------9th June 2021----------------------------

Loops in C#
    1. while loop
    2. do while loop
    3. for loop
    4. for each loop

    1- While Loop

    a. initialization
    b. condition <, >, <=, >=
    c. increment or decrement to (to avoid infinite loop) ++, --

---------------------------------------10th June 2021---------------------------------------
Access Specifier in CSharp
1-Public - It will be accessible in whole solution.
2-Private - Only allowed inside the class.
3-Protected - Derived class instance only can access protected members.
4-Internal - Witing a assemble.
5-Protected Internal - Derived class instance only can access protected members. + Witing a assemble. 

----------------------------------------------11th June 2021------------------------
1-Is C# is case sensitive programing language?
2-What is the use of var keyword?
3-Difference between while and do-while loop?
4-What is access specifier in C-Sharp?
5-What is the default access specifier of class and class members?
6-Difference between .exe and .dll.
7-What is Unary operator?
8-What is namespace?
9-What is non-static or instance method?
10-Difference between static and non-static?

----------------------------------------------------------------------------------------------
Abstract Method in C-Sharp - The abstract keyword enables you to create classes and class members that are 
incomplete and must be implemented in a derived class
    1-If you would like to create an abstract method then the class must also be abstract.
    2-It does not mean that if you have defined an abstract class thah you also have to define an abstract method.
    3-You can't define the body of an abstract method.
    4-You can't define an abstract method as a private method.
    5-Inside the abstract class you can also define non-abstract methods like non-static,static,virtual etc.
    6-If you have defined a static method under an abstract class that method can be accessed with the abstract
    class.
    7-Besides static methods you can't access any other method with abstract class because you can't create an
    instance of an abstract class.
    8-If you would like to use an abstract method then you will have to use inhertiance which means you will
    inherit the abstract class and in the other class and then you will have to provide the body of all the 
    abstract methods in that inherited class. And when you provide the body you will have to use 'override' keyword.

-----------------------------------------14th June 2021---------------------------------------------------
Extension Method in C#
    1-When you will define a extesnion method then you will have to use static modifier.            
    2-Extension method parameter must be passed 'this' keyword with the type.
    3-Class must be static class.
    4-Only the type have the rights to access this method.

What is Constructor in CSharp?
Ans:-Constructor is a special type of method. It does not contain return type,it has the same name
as we have the class name. Every class has a default constructor. And default Constructor will be 
called automatically whenever you will create the instance or object of the class. And the role of
default constructor is to assign the default value to the class level fields.

If you have normal class then it will get default constructor. If you have static class then it will
get default static constructor and static constructor role is to assign the default value to static
fields of the class. Only one static constructor you can define or by default it exist.

Constructor Types in C#
    1-Default Or Parameterless Constructor :- If you will not manually define the it will be called as
    a default constructor but when you will create the parameterized then default constructor will be 
    removed and if you would like to define default constructor then manually you will have to define it
    and it will be parameterless constructor.
    
    2-Parameterized Constructor or Overload Constructor
    
    3-Copy Constructor
    
    4-Static Constructor -
        A-If you will define static constructor you can't use access specifier.
        B-You can define only one static constructor.
        C-Static constructor must be parameterless constructor.
        D-Static constructor will be called before the Main method.
        E-Static constructor you can define under the static as well as non-static class.
        F-Static has not any relation with the instance or object.
        G-Static Constructor will assign the default value to the static fields of the class.
    
    5-Private Constructor

        --------------------------------------------15th June 2021----------------------------------------------
    Interface in CSharp
    1-Whenever you will create a interface just keep 'I' as prefix with the interface name. It does not
    mandatory but it is a part of naming convenstion which you shuld follow.
    2-You will use interface keyword to create the interface and interface will contain only property,method,
    delegate,events.
    3-You can only declare the members inside the interface. You can't provide the body.
    4-You can't use any access specifier with interface members because they are by default public.
    5-To access the members of interface, you will have to inherit interface with the class and that time
    you will have to provide the body of all the members of interface. 
    6-When you will provide the body of all the interface members that time you will have to use public
    as a access specifier otherwise it will be not treated as interface members.
    7-You can't create the instance of interface.
  

  -------------------------------------------------------------------------------------------------
    Array in CSharp
        1-Array is a reference type.
        2-Array is fixed in size.
        3-Array index will start with 0.
        4-Array max index will be 'size-1'.
        5-If is good if you would like to store same data types multiple value.
        6-It is type safe.

        Array Type in C#
            1-Single Dimensional Array 
            2-Multi Dimensional Array 
            3-Jagged Array 


            1-Single Dimensional Array 
            int[] myFirstNumbers = new int[] { 1, 2, 3, 43, 5 };

            2-Multi Dimensional Array 
            int[,] mySecondNumbers = new int[3, 2] { { 12, 22 }, { 223, 224}, { 422, 511 }};
            Console.WriteLine(mySecondNumbers[0,1]);
            
            for (int i = 0; i < 3; i++)rows
            {
                for (int j = 0; j < 2; j++)columns
                {
                    Console.Write(mySecondNumbers[i,j]+" ");
                }
                Console.WriteLine();
            }

            3-Jagged Array 

            int[][] myThirdNumbers = new int[2][];0 1
            myThirdNumbers[0]=new int[2] { 1, 2 };
            myThirdNumbers[1] = new int[] { 2,4,5 };

            Console.WriteLine(myThirdNumbers[1][1]);

            int[][,] myFourthNumbers = new int[2][,];0 1
            myFourthNumbers[0] = new int[3,2] { { 12, 22 }, { 223, 224 }, { 422, 511 } };
            myFourthNumbers[1] = new int[2,2] { { 12, 22 }, { 223, 224 }};

---------------------------------------------------------------------------------------------------------
  Enum in C#
    1-It is value type and user define.
    2-To Declare the enum you will have to use 'enum' keyword.
    3-You can define it inside the namespace or inside the class.
    4-Enum default datat type is int.
    5-Enum will start by default with 0 and it will add +1 for next item.
    6-Enum will not allow any other data type except all int types.

 ------------------------------------------------------------------------------------
  Class in CSharp
    1-It is reference type and user define type.
    2-It gets memory on heap.
    3-GC is required for clean up.
    4-You will have to use 'class' keyword to define class.
    5-It is good for large amount of data storage.
    6-All pre-define referece type derive from class.
    7-We can define parameter less constructor.    

    Struct In CSharp
    1-It is value type and user define type.
    2-It gets memory on stack.
    3-GC not required.
    4-You will have to use 'struct' keyword to define structure.
    5-It is good for small amount of data storage.
    6-All pre-define value type derive from struct.
    7-You can't define explicity parameterless constructor but internally 
    default constructor exist.
    8-Struct will also behave same like class with some limitation.

-------------------------16th June 2021------------------------------------------

            int a = 1, b = 2, c = 3;

            1,2,3,4,5,...1000.
            int[] myNumbers = new int[] { 1, 2, 3, 4, 5, 6, 1000 };

            1,"Sam",25,95000.00,'M'

            Collection in C#
            1-Non-Generic Collection Namespace:- System.Collections;
            A-ArrayList B-SortedList C-HashTable D-Stack E-Queue

            2-Generic Collection
            A-List<T> B-Dictionary<Tkey,Tvalue> C-SortedList<Tkey,Tvalue>
            D-HashSet<T> E-Stack<T> F-Queue<T>

            A-ArrayList

            IList collection = new ArrayList();
            collection.Add(10);
            collection.Add(100);
            collection.Add(1000);


            var arrayList = new ArrayList();
            Console.WriteLine(arrayList.Capacity);4
            arrayList.Add(1);            
            arrayList.Add("Sam");
            arrayList.Add(25);
            arrayList.Add(95000.00);            
            arrayList.Add('M');
            arrayList.TrimToSize();


            Console.WriteLine(arrayList[2]);25

            arrayList.AddRange(collection);

            Console.WriteLine(arrayList.Contains(10000));
            arrayList.Insert(1, "Test");
            Console.WriteLine(arrayList.IndexOf("Test"));
            arrayList.InsertRange(0, collection);

            arrayList.Remove("Test");
            arrayList.RemoveAt(3);
            arrayList.RemoveRange(0, 3);

            Console.WriteLine("----------------");

            for (int i = 0; i < arrayList.Count; i++)
            {
                Console.WriteLine(arrayList[i]);
            }

            Console.WriteLine("----------------");

            foreach (var item in arrayList)
            {
                Console.WriteLine(item);
            }

            B-SortedList
            1-Key should not be null.
            2-Key should not be duplicate.
            3-Value can be null as well as duplicate.
            --Only for Sorted List
            4-Key should of same data type.
            

            var sortList = new SortedList();
            sortList.Add(1, "David");
            sortList.Add(9, null);
            sortList.Add(2, "David");
            sortList.Add(8, "Kevin");
            sortList.Add(3, null);

            Console.WriteLine(sortList[8]);


            foreach (var key in sortList.Keys)
            {
                Console.WriteLine("Key is:"+key +" value is:"+ sortList[key]);
            }


            C - HashTable

            var hashList = new Hashtable();
            hashList.Add(1, "David");
            hashList.Add("Anthony", null);
            hashList.Add(2, "David");
            hashList.Add(8, "Kevin");
            hashList.Add("Divya", null);



            foreach (var key in hashList.Keys)
            {
                Console.WriteLine("Key is:" + key + " value is:" + hashList[key]);
            }


            D-Stack LIFO - Last in First out

            var stackList = new Stack();
            stackList.Push(1);
            stackList.Push("Sam");
            stackList.Push(25);
            stackList.Push(95000.00);
            stackList.Push('M');

            Console.WriteLine(stackList.Peek());M
            Console.WriteLine("-------------------");
            Console.WriteLine(stackList.Pop());M
            Console.WriteLine("--------------------");

            foreach (var item in stackList)
            {
                Console.WriteLine(item);
            }

            E-Queue FIFO First in First out

            var queueList = new Queue();
            queueList.Enqueue(1);
            queueList.Enqueue("Sam");
            queueList.Enqueue(25);
            queueList.Enqueue(95000.00);
            queueList.Enqueue('M');


            Console.WriteLine(queueList.Peek());1
            Console.WriteLine("-------------------");
            Console.WriteLine(queueList.Dequeue());1
            Console.WriteLine("--------------------");


            foreach (var item in queueList)
            {
                Console.WriteLine(item);
            }
            Console.ReadKey();