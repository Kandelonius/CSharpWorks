Questions to keep in mind -

1-What is C#?
2-What is JIT? and what is the role of JIT?
3-Difference between readonly and const keyword?
4-Difference between value type and reference type in C#?
5-Difference between Implicit & Explicit Conversion?
6-Difference between boxing and unboxing?
7-What is operators in C#?
8-What is the use of if else condition?
9-Difference between if else and switch case  in C#?
10-Difference between for loop and Foreach loop in C#?

C#,.NET Framework,ASP.NET,ASP.NET MVC,ASP.NET Core - Web Application - Goal

C# Programing Language with .NET Framework:-
C# 1.0 Year 2002 .NET Framework 1.0 + IDE -2002
C# 9.0 Year 2021 .NET Framework 4.8 IDE -2019

Age Of C# Programing Language= 19+ years

CLR - Common Language Runtime
MSIL - Microsoft Intermediate Language
.dll- Dynamic Link Library - It does not contain Main method.
.exe- Executable File - It contains Main method.
JIT - Just In Time - compiler, it translates native C# code to machine code
Compile Time
Run Time 
CTS - Common Type System - defines how types are declared, used and managed in the CLR and 
      important for cross-language integration
CLS - Common Language Specification - defines a set of features that are needed by many common
      applications, and provides guidelines for .NET languages

C# Source Code:-CLR-MSIL(.dll,.exe)-JIT-Native(Machine) code-OS-Run

using System;
namespace MyNamespace
{  
    class MyClass
	{
	  static void Main()
	  {
	     Console.WrtieLine("Hello C# Program");
		 Console.ReadKey();
	  }
	}
}

--------Microsoft Journey In IT-----------------------------------------
1-Console Application - To Learn C#
2-Windows Application or Desktop Application(.exe)
3-Web Application - Goal 
4-Mobile Apps - Xamarin
5-Web API 
6-Game Application etc.

-----------------------------------------------------------------------------

Namespace:- It's collection of namesapces,classes,struct,enum,delegate,interface etc.- (PascalCase)
Method - A set of statements which perform a specific task
Class Members:- Fields(camelCase),Properties,Methods(PascalCase)
Variable :- It's a container which contains the value
Data Type:- Defines the type of data
Class:- It is represented by an object. Class is a container which contains its members
Object :- It represents the class.

Pre-Defined OR Buit-In Data Types in C# - int,double,char,bool,string,object etc.            

User Defined Data Types in C# - class,object,array,delegate,interface,struct,enum,etc.

Value Type - int,double,char,bool,struct,enum etc.
  A. Has a default value of 0.
  B. Value type will be stored in Stack memory.
  C. No garbage collection required.

Reference Type - string,object,class,object,array,delegate,interface, etc.
  A. Has a default value of null.
  B. Referece type value is stored in heap memory but its reference is stored on the stack.
  C. Garbage collection is required for memory mamangement.

Class vs Object

India(Class)                         USA(Class)
Shri Narendra Modi(object)           Biden(object)

Class Members(field,Property,Method(non-static(object))(Static(class)))

How to create an instance of a class
   ClassName objectName = new ClassName();
            
Var Keyword:
   1. Whenever you declare var you must assign a value to it
   2. Var cannot be assigned a Null value
   3. When var is assigned a value it will be stored as a specific data type
   4. When it is assigned as a data type it will behave like that data type
   5. You can use var as a local variable
   6. Can't declare var as a class level variable or parameterized variable
   7. Can't use var as a return type in a method declaration
              
Conversions:
              
1. Implicit Conversion -
   A. Converting lower precision values into higher precision values is called implicit conversion
   B. No type casting is required *Example: sbyte can be converted to short
   C. No data loss
              
2. Explicit Conversion -
   A. converting higher precision values to lower precision values is known as explicit conversion
   B. Must type cast
   C. Possibility of data loss
              
Boxing and Unboxing:
              
1. Boxing -
   A. Converting value type into an object type
   B. No type casting is required
              
2. Unboxing -
   A. Converting an object into a value type
   B. Typecasting is required
              
Const and ReadOnly
              
1. Const -
   A. Cannot be changed after it is declared
   B. A value must be given when a const is declared
              
2. ReadOnly -
   A. Can only be changed in the constructor

-------------------------------------------8th June 2021---------------------------------------------------------
Operators in C#:-
            1-Arithmetic Operator +,-,*,/,%
            2-Assignment Opeartor =
            3-Unary Operator i++(Post-Incrment),++i(Pre-Increment),i--(Post-Decrement),--i(Pre-Decrement)
            4-Comparision Oprator or Conditional Operator >,<,>=,<=,==,!=
            5-Logical Operator &&(AND),||(OR),!(NOT)
            6-Ternary Operator /? conditon?true:false;

1-Arithmetic Operator +,-,*,/,%
   int i = 20, j = 10;
   Console.WriteLine(i + j);20=10=30
   Console.WriteLine(i - j);20-10=10
   Console.WriteLine(i * j);20 * 10=200
   Console.WriteLine(i / j);20/10=2
   Console.WriteLine(i % j);20%10=0

2-Assignment Opeartor =
   int k = 200;

            3-Unary Operator i++(Post-Incrment),++i(Pre-Increment),i--(Post-Decrement),--i(Pre-Decrement)
            int l = 20;

            Console.WriteLine(l++);20
            Console.WriteLine(++l);21+1=22
            Console.WriteLine(l++);22
            Console.WriteLine(l++);23
            Console.WriteLine(l);24

            Console.WriteLine(--l);20-1=19
            Console.WriteLine(l--);19
            Console.WriteLine(l--);19-1=18
            Console.WriteLine(--l);201618-2=16

            4-Comparision Oprator or Conditional Operator >,<,>=,<=,==,!=
            int i = 20, j = 10;

            Console.WriteLine(i > j);true
            Console.WriteLine(i < j);false
            Console.WriteLine(i >= j);true
            Console.WriteLine(i <=j);false
            Console.WriteLine(i == j);false
            Console.WriteLine(i != j);true

            5-Logical Operator &&(AND),||(OR),!(NOT)
            && (AND) 1-If both condition is true then it will return true.
            2-If first condtion is false it will not check second condition and it will return false.
            3-If first condition is true then it will check second condition and it second condition is true 
            then it will return true otherwise it will return false.
            int i = 20, j = 10;

            Console.WriteLine(i > j && j < i);true
            Console.WriteLine(i < j && j != i);false
            Console.WriteLine(i == j && j > i);false
            Console.WriteLine(i != j && j < i);true

            || (OR) 1-If first condition is true then it will not check second condition and it will return true.
            2-If first condition is false then it will check second condition and if second condition is true  
            then it will return true.
            3-If both condition is false then only it will return false.

            Console.WriteLine(i > j || j < i);true
            Console.WriteLine(i < j || j != i);true
            Console.WriteLine(i == j || j > i);false
            Console.WriteLine(i != j || j < i);true

            ! (Not)
            Console.WriteLine(!(i > j || j < i));truefalse
            Console.WriteLine(!(i < j || j != i));truefalse
            Console.WriteLine(!(i == j || j > i));falsetrue
            Console.WriteLine(!(i != j || j < i));truefalse

            6-Ternary Operator conditon?true:false;

            int result = !(i == j || j > i) ? 500 : 1000;

            Console.WriteLine(result);

-------------------------------------------9th June 2021----------------------------

Loops in C#
    1. while loop
    2. do while loop
    3. for loop
    4. for each loop

    1- While Loop

    a. initialization
    b. condition <, >, <=, >=
    c. increment or decrement to (to avoid infinite loop) ++, --

---------------------------------------10th June 2021---------------------------------------
Access Specifier in CSharp
1-Public - It will be accessible in whole solution.
2-Private - Only allowed inside the class.
3-Protected - Derived class instance only can access protected members.
4-Internal - Witing a assemble.
5-Protected Internal - Derived class instance only can access protected members. + Witing a assemble. 

----------------------------------------------11th June 2021------------------------
1-Is C# is case sensitive programing language?
2-What is the use of var keyword?
3-Difference between while and do-while loop?
4-What is access specifier in C-Sharp?
5-What is the default access specifier of class and class members?
6-Difference between .exe and .dll.
7-What is Unary operator?
8-What is namespace?
9-What is non-static or instance method?
10-Difference between static and non-static?

----------------------------------------------------------------------------------------------
Abstract Method in C-Sharp
    1-If you would like to create a abstract method then class must be abstract class.
    2-It does not mean that if you have define a abstract class then you will also have to
    define abstract method.
    3-You can't define the body of abstract method.
    4-You can't define abstract method as a private method.
    5-Inside the abstract class you can also define non-abstract method like non-static,static,virtual etc.
    7-If you have define static method under the abstract class that method you can access with the abstract
    class.
    8-Accept static method you can't access any other method with abstract class because you can't create the
    instance of abstract class.
    9-If you would like to use the abstract method then you will have to use inhertiance it means you will
    inherit abstract class with other class and then you will have to provide the body of all the abstract methods
    into that inherited class. And when you will provide the body you will have to use 'override' keyword.

-----------------------------------------14th June 2021---------------------------------------------------
Extension Method in C#
    1-When you will define a extesnion method then you will have to use static modifier.            
    2-Extension method parameter must be passed 'this' keyword with the type.
    3-Class must be static class.
    4-Only the type have the rights to access this method.

----------------------------------------------------------------------------------------------------------------------
What is Constructor in CSharp?
Ans:-Constructor is a special type of method. It does not contain return type,it has the same name
as we have the class name. Every class has a default constructor. And default Constructor will be 
called automatically whenever you will create the instance or object of the class. And the role of
default constructor is to assign the default value to the class level fields.

If you have normal class then it will get default constructor. If you have static class then it will
get default static constructor and static constructor role is to assign the default value to static
fields of the class. Only one static constructor you can define or by default it exist.

Constructor Types in C#
    1-Default Or Parameterless Constructor :- If you will not manually define the it will be called as
    a default constructor but when you will create the parameterized then default constructor will be 
    removed and if you would like to define default constructor then manually you will have to define it
    and it will be parameterless constructor.
    
    2-Parameterized Constructor or Overload Constructor
    
    3-Copy Constructor
    
    4-Static Constructor -
        A-If you will define static constructor you can't use access specifier.
        B-You can define only one static constructor.
        C-Static constructor must be parameterless constructor.
        D-Static constructor will be called before the Main method.
        E-Static constructor you can define under the static as well as non-static class.
        F-Static has not any relation with the instance or object.
        G-Static Constructor will assign the default value to the static fields of the class.
    
    5-Private Constructor